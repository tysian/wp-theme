import { PackageJson } from 'type-fest';
import { isEmpty, isObject, kebabCase, merge } from 'lodash-es';
import chalk from 'chalk';
import { parse } from 'css-tree';
import MagicString from 'magic-string';
import { gitCheck, gitCommit } from '$/shared/utils/gitCheck.js';
import {
  FileExistenceError,
  asArray,
  fileExists,
  logger,
  readStream,
  updateLogger,
  writeStream,
} from '$/shared/utils/index.js';
import { parseZodError } from '$/shared/utils/parseZodError.js';
import {
  COMMIT_AFTER_MSG,
  StyleCss,
  StyleCssGeneratorOptions,
  styleCssLabels,
  styleCssSchema,
} from './create-style-css.config.js';

export const styleCssGenerator = async (options: StyleCssGeneratorOptions) => {
  logger.start('Generating style.css with meta information.');
  try {
    const {
      validateSchema = false,
      dontOverwrite = false,
      interactive = true,
      commit = false,
      message = COMMIT_AFTER_MSG,
    } = options;

    // Check git
    await gitCheck({ defaultAction: interactive ? 'ask' : 'commit' });

    const STYLE_CSS_PATH = './style.css';
    const styleCssMetaFileExists = await fileExists(STYLE_CSS_PATH);
    if (dontOverwrite && styleCssMetaFileExists) {
      throw new Error(
        `Your style.css file exist and can't be overwritten. Please change disable '--dont-overwrite' option or rename/move/delete your style.css file.`
      );
    }

    // Check if package.json exists in CWD
    const PKG_PATH = './package.json';
    const pkgExists = await fileExists(PKG_PATH);
    if (!pkgExists) throw new FileExistenceError(PKG_PATH);

    // Read package.json and check if it has any of the necessary keys
    const pkg: PackageJson & Record<'wp' | 'wordpress' | 'wp-theme-cli', StyleCss> =
      await readStream(PKG_PATH).then(JSON.parse);

    // Inherit properties from package.json
    const pkgWp = merge(
      {
        theme_name: pkg.name || '',
        theme_uri: pkg.homepage || '',
        author: (typeof pkg.author === 'string' ? pkg.author : pkg.author?.name) || '',
        author_uri: (typeof pkg.author === 'object' && pkg.author?.url) || '',
        description: pkg.description || '',
        license: pkg.license || '',
        tags: pkg.keywords || [],
        text_domain: kebabCase(pkg.name ?? '') || 'theme',
      },
      pkg?.wp ?? pkg?.wordpress ?? pkg?.['wp-theme-cli']
    );

    if (pkgWp?.version) {
      logger.warn(
        `Found theme version. Version will be replaced by ${chalk.italic('package.json')} version.`
      );
    }

    // Validate schema
    if (validateSchema) {
      logger.start('Validating wordpress property in package.json.');
      if (isObject(pkgWp) && isEmpty(pkgWp)) {
        throw new Error('Your wordpress property cannot be empty.');
      }

      const parsed = styleCssSchema.safeParse(pkgWp);
      if (!parsed.success) {
        throw new Error(parseZodError(parsed.error));
      }

      updateLogger.success('Wordpress property validated.');
      updateLogger.done();
    }

    // Set version based on package.json
    pkgWp.version = pkg.version || '0.0.1';

    // Show warning if theme name is empty.
    if (!pkgWp?.theme_name) {
      logger.warn(`It would be cool, if you'd set theme name at least...`);
    }

    // Generate style
    const contentArray: string[] = ['/*'];
    for (const [key, val] of Object.entries(pkgWp)) {
      const label = styleCssLabels[key as keyof StyleCss] ?? '';
      if (!label) continue;
      const value = asArray(val).join(', ');
      if (!value.trim()) continue;
      contentArray.push(`${label}: ${value}`);
    }
    contentArray.push(`\nStyle.css generated by 'wp-theme-cli' on ${new Date().toISOString()}`);
    contentArray.push('*/');

    const newComment = contentArray.join('\n');
    let content = newComment;

    if (styleCssMetaFileExists) {
      const oldContent = await readStream(STYLE_CSS_PATH);
      const magicOldContent = new MagicString(oldContent);
      let firstCommentFound = false;
      parse(oldContent, {
        positions: true,
        onComment(_, loc) {
          if (firstCommentFound) return;

          logger.info('Style.css file already exist, its first comment will be overwritten.');
          magicOldContent.overwrite(loc.start.offset, loc.end.offset, newComment);

          firstCommentFound = true;
        },
      });

      if (!firstCommentFound) {
        logger.info(
          `Style.css file already exist, but it doesn't have meta comment required by WordPress. Your new meta comment will be added at the top of the file.`
        );
        magicOldContent.prepend(`${newComment}\n`);
      }

      content = magicOldContent.toString();
    }

    updateLogger.start(`Updating style.css...`);
    await writeStream(STYLE_CSS_PATH, content);
    updateLogger.success('Your style.css file has been saved successfully.');
    updateLogger.done();
    if (commit) {
      await gitCommit(message, 'style.css');
    }
  } catch (error) {
    logger.error((error as Error)?.message);
  }
};
